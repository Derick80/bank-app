// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String    @id @unique @default(uuid())
  userName String    @unique
  email     String    @unique
  password  String?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @default(now())
  role      Role      @default(USER)
   accounts Account[]
  tokens  Token[]
  incomes   Income[]
  expenses  Expense[]
  deletedExpenses DeletedExpense[]
  profile  Profile?
  preferences Preferences?
}
model Token {
  id        String    @id @default(cuid())
  token     String
  type      TokenType
  expiresAt DateTime?
  sentTo    String?
  usedAt    DateTime?
  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  @@unique([token, type])
  @@index([userId])
}


model Account {
  id                String  @id @default(cuid())
  provider          String
  providerAccountId String
  refreshToken      String?
  accessToken       String?
  expiresAt         Int?
  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  @@unique([provider, providerAccountId])
  @@index([userId])
}
model Preferences {
  id        String    @id @unique @default(uuid())
  dailyEmails Boolean @default(true)
  createdAt DateTime  @default(now())
  updatedAt DateTime  @default(now())
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String   @unique
}
model Profile {
  id        String    @id @unique @default(uuid())
  firstName String
  lastName  String
  bio       String
  avatarImage String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @default(now())
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String   @unique
}
model Income {
  id            String    @id @unique @default(uuid())
  description   String

  amount        Float
  due_date      DateTime
  type          String  @default("income")
   include          Boolean   @default(true)
  user          User      @relation(fields: [userId], references: [id])
  userId        String
  incomeCategories IncomeCategory[]
createdAt     DateTime  @default(now())
  updatedAt     DateTime  @default(now())
}


model IncomeCategory {
  id String @id @unique @default(uuid())
  name String @unique
  value String @unique
  label String
  incomes Income[]

}

model Expense {
  id             String     @id @unique @default(uuid())
  description    String

  amount         Float
  due_date       DateTime
  type          String @default("expense")
   include           Boolean    @default(true)

  createdAt      DateTime   @default(now())
  updatedAt      DateTime   @default(now())
  user           User[]     @relation
  userId         String

  expenseCategories ExpenseCategory[]

}

model ExpenseCategory {
  id String @id @unique @default(uuid())
  name String @unique
  value String @unique
  label String
  expenses Expense[]

}

model DeletedExpense {
  id             String     @id @unique @default(uuid())
  description    String
  accountNameId  String
  amount         Float
  due_date       DateTime
  type          String
  frequency     String
  recurring      Boolean    @default(true)
  include           Boolean    @default(false)

  deletedAt      DateTime   @default(now())
  updatedAt      DateTime   @default(now())
  user           User[]     @relation
  userId         String
}

enum Role {
  ADMIN
  USER
  MEMBER
}


enum TokenType {
  REFRESH_TOKEN
  VERIFY_EMAIL
  RESET_PASSWORD
}